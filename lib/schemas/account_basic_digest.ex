defmodule ExAxos.AccountBasicDigest do
  @moduledoc """
  Provides struct and type for a AccountBasicDigest
  """

  @type t :: %__MODULE__{
          accountAsset: String.t() | nil,
          accountAssetOtherDesc: String.t() | nil,
          accountPurpose: String.t() | nil,
          accountPurposeOtherDesc: String.t() | nil,
          accountStatus: String.t() | nil,
          accountValue: number | nil,
          address: ExAxos.SimpleAddressDigest.t() | nil,
          advisorAbbreviation: String.t() | nil,
          advisorId: integer | nil,
          advisorName: String.t() | nil,
          alphaSort: String.t() | nil,
          birthDate: String.t() | nil,
          dateCloseInitiated: String.t() | nil,
          dateCreated: String.t() | nil,
          dateOpened: String.t() | nil,
          dateTerminated: String.t() | nil,
          emailAddress: String.t() | nil,
          firstDepositDate: String.t() | nil,
          industry: String.t() | nil,
          jointBirthDate: String.t() | nil,
          jointTaxId: String.t() | nil,
          legalName1: String.t() | nil,
          legalName2: String.t() | nil,
          legalName3: String.t() | nil,
          mailingName1: String.t() | nil,
          mailingName2: String.t() | nil,
          marginOrCash: String.t() | nil,
          name: String.t() | nil,
          number: String.t() | nil,
          owners: [ExAxos.AccountRegDigest.t()] | nil,
          phones: [ExAxos.AccountPhoneDigest.t()] | nil,
          repId: integer | nil,
          repName: String.t() | nil,
          statementFamilyId: String.t() | nil,
          statementFrequency: String.t() | nil,
          taxId: String.t() | nil,
          type: String.t() | nil,
          typeDescription: String.t() | nil
        }

  defstruct [
    :accountAsset,
    :accountAssetOtherDesc,
    :accountPurpose,
    :accountPurposeOtherDesc,
    :accountStatus,
    :accountValue,
    :address,
    :advisorAbbreviation,
    :advisorId,
    :advisorName,
    :alphaSort,
    :birthDate,
    :dateCloseInitiated,
    :dateCreated,
    :dateOpened,
    :dateTerminated,
    :emailAddress,
    :firstDepositDate,
    :industry,
    :jointBirthDate,
    :jointTaxId,
    :legalName1,
    :legalName2,
    :legalName3,
    :mailingName1,
    :mailingName2,
    :marginOrCash,
    :name,
    :number,
    :owners,
    :phones,
    :repId,
    :repName,
    :statementFamilyId,
    :statementFrequency,
    :taxId,
    :type,
    :typeDescription
  ]

  @doc false
  @spec __fields__(atom) :: keyword
  def __fields__(type \\ :t)

  def __fields__(:t) do
    [
      accountAsset: {:string, :generic},
      accountAssetOtherDesc: {:string, :generic},
      accountPurpose: {:string, :generic},
      accountPurposeOtherDesc: {:string, :generic},
      accountStatus: {:string, :generic},
      accountValue: :number,
      address: {ExAxos.SimpleAddressDigest, :t},
      advisorAbbreviation: {:string, :generic},
      advisorId: :integer,
      advisorName: {:string, :generic},
      alphaSort: {:string, :generic},
      birthDate: {:string, :generic},
      dateCloseInitiated: {:string, :generic},
      dateCreated: {:string, :generic},
      dateOpened: {:string, :generic},
      dateTerminated: {:string, :generic},
      emailAddress: {:string, :generic},
      firstDepositDate: {:string, :generic},
      industry: {:string, :generic},
      jointBirthDate: {:string, :generic},
      jointTaxId: {:string, :generic},
      legalName1: {:string, :generic},
      legalName2: {:string, :generic},
      legalName3: {:string, :generic},
      mailingName1: {:string, :generic},
      mailingName2: {:string, :generic},
      marginOrCash: {:string, :generic},
      name: {:string, :generic},
      number: {:string, :generic},
      owners: [{ExAxos.AccountRegDigest, :t}],
      phones: [{ExAxos.AccountPhoneDigest, :t}],
      repId: :integer,
      repName: {:string, :generic},
      statementFamilyId: {:string, :generic},
      statementFrequency: {:string, :generic},
      taxId: {:string, :generic},
      type: {:string, :generic},
      typeDescription: {:string, :generic}
    ]
  end
end
