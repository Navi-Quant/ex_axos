defmodule ExAxos.Schema.AccountGenerationAccountDigest do
  @moduledoc """
  Provides struct and type for a Schema.AccountGenerationAccountDigest
  """

  @type t :: %__MODULE__{
          accountAsset: String.t() | nil,
          accountAssetOtherDesc: String.t() | nil,
          accountNumber: String.t() | nil,
          accountPurpose: String.t() | nil,
          accountPurposeOtherDesc: String.t() | nil,
          accountType: String.t() | nil,
          address: ExAxos.Schema.SimpleAddressDigest.t() | nil,
          advisorId: integer | nil,
          alphaSort: String.t() | nil,
          birthDate: String.t() | nil,
          clientUserId: String.t() | nil,
          createdBy: String.t() | nil,
          emailAddress: String.t() | nil,
          employerMasterId: String.t() | nil,
          employerName: String.t() | nil,
          industry: String.t() | nil,
          jointBirthDate: String.t() | nil,
          jointPii: ExAxos.Schema.AccountPIIDigest.t() | nil,
          jointTaxId: String.t() | nil,
          legalName1: String.t() | nil,
          legalName2: String.t() | nil,
          legalName3: String.t() | nil,
          mailingName1: String.t() | nil,
          mailingName2: String.t() | nil,
          marginOrCash: String.t() | nil,
          phones: [ExAxos.Schema.AccountPhoneDigest.t()] | nil,
          pii: ExAxos.Schema.AccountPIIDigest.t() | nil,
          rpReferralId: String.t() | nil,
          rpUserId: String.t() | nil,
          statementFrequency: String.t() | nil,
          stmtFamilyId: integer | nil,
          subAccountType: String.t() | nil,
          taxId: String.t() | nil,
          urfId: String.t() | nil,
          webAccess: boolean | nil
        }

  defstruct [
    :accountAsset,
    :accountAssetOtherDesc,
    :accountNumber,
    :accountPurpose,
    :accountPurposeOtherDesc,
    :accountType,
    :address,
    :advisorId,
    :alphaSort,
    :birthDate,
    :clientUserId,
    :createdBy,
    :emailAddress,
    :employerMasterId,
    :employerName,
    :industry,
    :jointBirthDate,
    :jointPii,
    :jointTaxId,
    :legalName1,
    :legalName2,
    :legalName3,
    :mailingName1,
    :mailingName2,
    :marginOrCash,
    :phones,
    :pii,
    :rpReferralId,
    :rpUserId,
    :statementFrequency,
    :stmtFamilyId,
    :subAccountType,
    :taxId,
    :urfId,
    :webAccess
  ]

  @doc false
  @spec __fields__(atom) :: keyword
  def __fields__(type \\ :t)

  def __fields__(:t) do
    [
      accountAsset: {:string, :generic},
      accountAssetOtherDesc: {:string, :generic},
      accountNumber: {:string, :generic},
      accountPurpose: {:string, :generic},
      accountPurposeOtherDesc: {:string, :generic},
      accountType: {:string, :generic},
      address: {ExAxos.Schema.SimpleAddressDigest, :t},
      advisorId: :integer,
      alphaSort: {:string, :generic},
      birthDate: {:string, :generic},
      clientUserId: {:string, :generic},
      createdBy: {:string, :generic},
      emailAddress: {:string, :generic},
      employerMasterId: {:string, :generic},
      employerName: {:string, :generic},
      industry: {:string, :generic},
      jointBirthDate: {:string, :generic},
      jointPii: {ExAxos.Schema.AccountPIIDigest, :t},
      jointTaxId: {:string, :generic},
      legalName1: {:string, :generic},
      legalName2: {:string, :generic},
      legalName3: {:string, :generic},
      mailingName1: {:string, :generic},
      mailingName2: {:string, :generic},
      marginOrCash: {:string, :generic},
      phones: [{ExAxos.Schema.AccountPhoneDigest, :t}],
      pii: {ExAxos.Schema.AccountPIIDigest, :t},
      rpReferralId: {:string, :generic},
      rpUserId: {:string, :generic},
      statementFrequency: {:string, :generic},
      stmtFamilyId: :integer,
      subAccountType: {:string, :generic},
      taxId: {:string, :generic},
      urfId: {:string, :generic},
      webAccess: :boolean
    ]
  end
end
